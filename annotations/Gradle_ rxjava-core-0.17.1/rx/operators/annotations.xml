<root>
    <item name='rx.operators.OperationToIterator java.util.Iterator&lt;T&gt; toIterator(rx.Observable&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorCast rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Float&gt; sumFloats(rx.Observable&lt;java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAny rx.Observable.OnSubscribeFunc&lt;java.lang.Boolean&gt; isEmpty(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimeout rx.Subscriber call(rx.Subscriber) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.VirtualBoundedList java.util.List&lt;T&gt; toList()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeTimed rx.Observable.OnSubscribeFunc&lt;T&gt; take(rx.Observable&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkip.SkipTimed rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMap rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRepeat rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOnBounded java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Plan0&lt;R&gt; then(rx.Observable&lt;T1&gt;, rx.functions.Func1&lt;T1,R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Integer&gt; sumAtLeastOneIntegers(rx.Observable&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorScan rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.subjects.Subject&lt;T,T&gt; createScheduledSubject(rx.subjects.Subject&lt;T,T&gt;, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOn rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoin rx.Subscription onSubscribe(rx.Observer&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Float&gt; sumAtLeastOneFloats(rx.Observable&lt;java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorFlatMap rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends TOpening&gt;, rx.functions.Func1&lt;? super TOpening,? extends rx.Observable&lt;? extends TClosing&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.Observable.OnSubscribeFunc&lt;R&gt; when(rx.joins.Plan0&lt;R&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.Observable&lt;? extends T4&gt;, rx.functions.Func5&lt;? super T0,? super T1,? super T2,? super T3,? super T4,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinctUntilChanged rx.Observable.OnSubscribeFunc&lt;T&gt; distinctUntilChanged(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends U&gt;, java.util.Comparator&lt;U&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorFilter java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCache rx.Observable.OnSubscribeFunc&lt;T&gt; cache(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage.AverageIntegerExtractor rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorSkip rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableSortedList java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;T1&gt;, rx.functions.Func2&lt;? super T0,? super T1,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorDoOnEach rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.CustomReplaySubject rx.operators.OperationReplay.CustomReplaySubject&lt;T,T,T&gt; create(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSample rx.Observable.OnSubscribeFunc&lt;T&gt; sample(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeTimed.TakeTimed rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow.Window java.lang.Object getContents()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;U&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorGroupBy java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; minBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTimer.TimerOnce rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorSubscribeOn java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationLatest java.lang.Iterable&lt;T&gt; latest(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationConcat rx.Observable.OnSubscribeFunc&lt;T&gt; concat(rx.Observable&lt;? extends T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; min(rx.Observable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Pattern2&lt;T1,T2&gt; and(rx.Observable&lt;T1&gt;, rx.Observable&lt;T2&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimestamp rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super rx.schedulers.Timestamped&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMaterialize rx.Observable.OnSubscribeFunc&lt;rx.Notification&lt;T&gt;&gt; materialize(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.ToMultimap.ToMultimapObserver void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.Observable&lt;? extends T4&gt;, rx.Observable&lt;? extends T5&gt;, rx.functions.Func6&lt;? super T0,? super T1,? super T2,? super T3,? super T4,? super T5,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkipUntil rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.Observable.OnSubscribeFunc&lt;R&gt; when(java.lang.Iterable&lt;? extends rx.joins.Plan0&lt;R&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.ToMultimap rx.Subscription onSubscribe(rx.Observer&lt;? super java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationGroupByUntil rx.Subscription onSubscribe(rx.Observer&lt;? super rx.observables.GroupedObservable&lt;TKey,TResult&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRetry rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOn java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeTimed.TakeTimed rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.BufferUntilSubscriber BufferUntilSubscriber(int, rx.Subscriber&lt;? super T&gt;, rx.subscriptions.CompositeSubscription) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeLast rx.Observable.OnSubscribeFunc&lt;T&gt; takeLast(rx.Observable&lt;? extends T&gt;, int, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZipIterable java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Long&gt; sumAtLeastOneLongs(rx.Observable&lt;java.lang.Long&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.DefaultMultimapCollectionFactory java.util.Collection&lt;V&gt; call(K)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimestamp rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super rx.schedulers.Timestamped&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTimeInterval rx.Observable.OnSubscribeFunc&lt;rx.schedulers.TimeInterval&lt;T&gt;&gt; timeInterval(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableSortedList rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super java.util.List&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.functions.Func0&lt;rx.operators.OperationWindow.Window&lt;T&gt;&gt; windowMaker()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.Chunk C getContents()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationMergeMaxConcurrent rx.Observable.OnSubscribeFunc&lt;T&gt; merge(rx.Observable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.DefaultMultimapCollectionFactory java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Float&gt; sumFloats(rx.Observable&lt;java.lang.Float&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimeout rx.Subscriber call(rx.Subscriber)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDelay rx.Observable.OnSubscribeFunc&lt;T&gt; delaySubscription(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, rx.functions.Func0&lt;? extends rx.Observable&lt;? extends TClosing&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.VirtualArrayList java.util.List&lt;T&gt; toList()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; minBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OnSubscribeRange void call(rx.Subscriber&lt;? super java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, int, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkipUntil rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorParallel rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.Observable&lt;? extends T4&gt;, rx.Observable&lt;? extends T5&gt;, rx.Observable&lt;? extends T6&gt;, rx.Observable&lt;? extends T7&gt;, rx.Observable&lt;? extends T8&gt;, rx.functions.Func9&lt;? super T0,? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorUnsubscribeOn rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSample rx.Observable.OnSubscribeFunc&lt;T&gt; sample(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.subjects.Subject&lt;T,T&gt; replayWindowed(long, java.util.concurrent.TimeUnit, int, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeLast rx.Observable.OnSubscribeFunc&lt;T&gt; takeLast(rx.Observable&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorScan rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Double&gt; averageDoubles(rx.Observable&lt;java.lang.Double&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableSortedList java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationInterval rx.Observable.OnSubscribeFunc&lt;java.lang.Long&gt; interval(long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.CustomReplaySubject void onNext(TInput) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationDebounce rx.Observable.OnSubscribeFunc&lt;T&gt; debounce(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinctUntilChanged rx.Observable.OnSubscribeFunc&lt;T&gt; distinctUntilChanged(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends U&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMap rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToFuture java.util.concurrent.Future&lt;T&gt; toFuture(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMap.DefaultToMapFactory java.util.Map&lt;K,V&gt; call()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinct rx.Observable.OnSubscribeFunc&lt;T&gt; distinct(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends U&gt;, java.util.Comparator&lt;U&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Long&gt; sumAtLeastOneLongs(rx.Observable&lt;java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorUnsubscribeOn rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZip rx.Subscriber&lt;? super rx.Observable[]&gt; call(rx.Subscriber&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinct rx.Observable.OnSubscribeFunc&lt;T&gt; distinct(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSequenceEqual rx.Observable&lt;java.lang.Boolean&gt; sequenceEqual(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.functions.Func2&lt;? super T,? super T,java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Double&gt; sumDoubles(rx.Observable&lt;java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorFlatMap rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationConcat rx.Observable.OnSubscribeFunc&lt;T&gt; concat(java.lang.Iterable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow.Window rx.Observable&lt;T&gt; getContents()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Integer&gt; sumAtLeastOneIntegers(rx.Observable&lt;java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableList rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super java.util.List&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.ObservableBasedMultiChunkCreator ObservableBasedMultiChunkCreator(rx.operators.ChunkedOperation.OverlappingChunks&lt;T,C&gt;, rx.Observable&lt;? extends TOpening&gt;, rx.functions.Func1&lt;? super TOpening,? extends rx.Observable&lt;? extends TClosing&gt;&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimestamp java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; maxBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkip rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDefaultIfEmpty rx.Observable.OnSubscribeFunc&lt;T&gt; defaultIfEmpty(rx.Observable&lt;? extends T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinctUntilChanged rx.Observable.OnSubscribeFunc&lt;T&gt; distinctUntilChanged(rx.Observable&lt;? extends T&gt;, java.util.Comparator&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.SubjectWrapper void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationToMap.ToMap.ToMapObserver void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSequenceEqual rx.Observable&lt;java.lang.Boolean&gt; sequenceEqual(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.functions.Func2&lt;? super T,? super T,java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,java.util.Collection&lt;T&gt;&gt;&gt; toMultimap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Float&gt; averageFloats(rx.Observable&lt;java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimeoutWithSelector rx.Subscriber call(rx.Subscriber)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Pattern2&lt;T1,T2&gt; and(rx.Observable&lt;T1&gt;, rx.Observable&lt;T2&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationOnErrorReturn rx.Observable.OnSubscribeFunc&lt;T&gt; onErrorReturn(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;java.lang.Throwable,? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableSortedList rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super java.util.List&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,V&gt;&gt; toMap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;, rx.functions.Func1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Plan0&lt;R&gt; then(rx.Observable&lt;T1&gt;, rx.functions.Func1&lt;T1,R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMap.ToMap rx.Subscription onSubscribe(rx.Observer&lt;? super java.util.Map&lt;K,V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorCast java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSynchronize java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb void call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorFilter rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDebounce rx.Observable.OnSubscribeFunc&lt;T&gt; debounce(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorResumeNextViaFunction java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRepeat java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMergeDelayError rx.Observable.OnSubscribeFunc&lt;T&gt; mergeDelayError(rx.Observable&lt;? extends T&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationGroupJoin rx.Subscription onSubscribe(rx.Observer&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; max(rx.Observable&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkipLast rx.Observable.OnSubscribeFunc&lt;T&gt; skipLast(rx.Observable&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkipWhile java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.CustomReplaySubject rx.operators.OperationReplay.CustomReplaySubject&lt;T,T,T&gt; create()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.Observable&lt;? extends T4&gt;, rx.Observable&lt;? extends T5&gt;, rx.Observable&lt;? extends T6&gt;, rx.Observable&lt;? extends T7&gt;, rx.functions.Func8&lt;? super T0,? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorScan java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationFlatMap rx.functions.Func1&lt;T,rx.Observable&lt;U&gt;&gt; flatMapIterableFunc(rx.functions.Func1&lt;? super T,? extends java.lang.Iterable&lt;? extends U&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSynchronize rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage.AverageFloatExtractor rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Float&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorDoOnEach java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMulticast rx.Observable&lt;TResult&gt; multicast(rx.Observable&lt;? extends TInput&gt;, rx.functions.Func0&lt;? extends rx.subjects.Subject&lt;? super TInput,? extends TIntermediate&gt;&gt;, rx.functions.Func1&lt;? super rx.Observable&lt;TIntermediate&gt;,? extends rx.Observable&lt;TResult&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Integer&gt; sumIntegers(rx.Observable&lt;java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorFilter java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorGroupBy rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super rx.observables.GroupedObservable&lt;K,T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDefer rx.Observable.OnSubscribeFunc&lt;T&gt; defer(rx.functions.Func0&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationParallelMerge rx.Observable&lt;rx.Observable&lt;T&gt;&gt; parallelMerge(rx.Observable&lt;rx.Observable&lt;T&gt;&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationInterval rx.Observable.OnSubscribeFunc&lt;java.lang.Long&gt; interval(long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeLast rx.Observable.OnSubscribeFunc&lt;T&gt; takeLast(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.SingleChunkCreator SingleChunkCreator(rx.operators.ChunkedOperation.Chunks&lt;T,C&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoin rx.Subscription onSubscribe(rx.Observer&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkipWhile rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOnBounded rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage.AverageLongExtractor rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationFinally rx.Observable.OnSubscribeFunc&lt;T&gt; finallyDo(rx.Observable&lt;? extends T&gt;, rx.functions.Action0)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMap java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Integer&gt; average(rx.Observable&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDelay rx.Observable.OnSubscribeFunc&lt;T&gt; delay(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends rx.Observable&lt;U&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDelay rx.Observable&lt;T&gt; delay(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; minBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;, java.util.Comparator&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorParallel java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkip java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToIterator java.util.Iterator&lt;T&gt; toIterator(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableList java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.Observable&lt;? extends T4&gt;, rx.Observable&lt;? extends T5&gt;, rx.Observable&lt;? extends T6&gt;, rx.functions.Func7&lt;? super T0,? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.DefaultToMultimapFactory java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt; call()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRetry java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSingle rx.Observable.OnSubscribeFunc&lt;T&gt; singleOrDefault(rx.Observable&lt;? extends T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationRefCount rx.Observable.OnSubscribeFunc&lt;T&gt; refCount(rx.observables.ConnectableObservable&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSample.SampleWithObservable rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorObserveOn java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationToMap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,V&gt;&gt; toMap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;, rx.functions.Func1&lt;? super T,? extends V&gt;, rx.functions.Func0&lt;? extends java.util.Map&lt;K,V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.functions.Func3&lt;? super T0,? super T1,? super T2,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationConcat rx.Observable.OnSubscribeFunc&lt;T&gt; concat(rx.Observable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeWhile rx.Observable.OnSubscribeFunc&lt;T&gt; takeWhile(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationOnErrorResumeNextViaObservable rx.Observable.OnSubscribeFunc&lt;T&gt; onErrorResumeNextViaObservable(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZip java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeUntil rx.Observable&lt;T&gt; takeUntil(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, int, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.ChunkObserver void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorUnsubscribeOn java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMerge java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAny rx.Observable.OnSubscribeFunc&lt;java.lang.Boolean&gt; any(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeLast rx.Observable.OnSubscribeFunc&lt;T&gt; takeLast(rx.Observable&lt;? extends T&gt;, int, long, java.util.concurrent.TimeUnit, rx.Scheduler) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OnSubscribeRange void call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTake rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorResumeNextViaFunction rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; maxBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;, java.util.Comparator&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimeoutWithSelector rx.Subscriber call(rx.Subscriber) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; max(rx.Observable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSerialize rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationElementAt rx.Observable.OnSubscribeFunc&lt;T&gt; elementAt(rx.Observable&lt;? extends T&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTimestamp java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMerge rx.Subscriber&lt;rx.Observable&lt;? extends T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAny rx.Observable.OnSubscribeFunc&lt;java.lang.Boolean&gt; any(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.BufferUntilSubscriber BufferUntilSubscriber(int, rx.Subscriber&lt;? super T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OnSubscribeFromIterable void call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; bufferWithBoundaryObservable(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;B&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinct rx.Observable.OnSubscribeFunc&lt;T&gt; distinct(rx.Observable&lt;? extends T&gt;, java.util.Comparator&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Long&gt; sumLongs(rx.Observable&lt;java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRetry rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, rx.Observable&lt;? extends TOpening&gt;, rx.functions.Func1&lt;? super TOpening,? extends rx.Observable&lt;? extends TClosing&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSerialize java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTake java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationFlatMap rx.Observable.OnSubscribeFunc&lt;R&gt; flatMap(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends rx.Observable&lt;? extends R&gt;&gt;, rx.functions.Func1&lt;? super java.lang.Throwable,? extends rx.Observable&lt;? extends R&gt;&gt;, rx.functions.Func0&lt;? extends rx.Observable&lt;? extends R&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.DefaultToMultimapFactory java.lang.Object call()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMerge rx.Subscriber&lt;rx.Observable&lt;? extends T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorObserveOnBounded java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationAny rx.Observable.OnSubscribeFunc&lt;java.lang.Boolean&gt; exists(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Pattern2&lt;T1,T2&gt; and(rx.Observable&lt;T1&gt;, rx.Observable&lt;T2&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZipIterable rx.Subscriber&lt;? super T1&gt; call(rx.Subscriber&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.TimeBasedChunkCreator TimeBasedChunkCreator(rx.operators.ChunkedOperation.OverlappingChunks&lt;T,C&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSerialize java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationParallelMerge rx.Observable&lt;rx.Observable&lt;T&gt;&gt; parallelMerge(rx.Observable&lt;rx.Observable&lt;T&gt;&gt;, int, rx.Scheduler) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.subjects.Subject&lt;T,T&gt; replayWindowed(long, java.util.concurrent.TimeUnit, int, rx.Scheduler) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkipLast.SkipLastTimed rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; min(rx.Observable&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTimer.TimerPeriodically rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorParallel OperatorParallel(rx.functions.Func1&lt;rx.Observable&lt;T&gt;,rx.Observable&lt;R&gt;&gt;, rx.Scheduler) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTake java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.SafeObservableSubscription rx.operators.SafeObservableSubscription wrap(rx.Subscription)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; min(rx.Observable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap.DefaultMultimapCollectionFactory java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Long&gt; averageLongs(rx.Observable&lt;java.lang.Long&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; maxBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;, java.util.Comparator&lt;? super R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, long, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Long&gt; sumLongs(rx.Observable&lt;java.lang.Long&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.Observable.OnSubscribeFunc&lt;T&gt; subscriberOf(rx.Observable&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; max(rx.Observable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Double&gt; sumAtLeastOneDoubles(rx.Observable&lt;java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZipIterable java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorOnErrorFlatMap java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Float&gt; averageFloats(rx.Observable&lt;java.lang.Float&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMostRecent java.lang.Iterable&lt;T&gt; mostRecent(rx.Observable&lt;? extends T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMap.DefaultToMapFactory java.lang.Object call()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationGroupByUntil.GroupSubject rx.observables.GroupedObservable&lt;K,V&gt; toObservable()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZip java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.CustomReplaySubjectSubscribeFunc rx.Subscription onSubscribe(rx.Observer&lt;? super TResult&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationMulticast rx.observables.ConnectableObservable&lt;R&gt; multicast(rx.Observable&lt;? extends T&gt;, rx.subjects.Subject&lt;? super T,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDematerialize rx.Observable.OnSubscribeFunc&lt;T&gt; dematerialize(rx.Observable&lt;? extends rx.Notification&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkip.SkipTimed rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Float&gt; sumAtLeastOneFloats(rx.Observable&lt;java.lang.Float&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOn rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAsObservable rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorRetry java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSample.SampleWithObservable rx.Subscription onSubscribe(rx.Observer&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.SafeObserver void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; max(rx.Observable&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorUnsubscribeOn java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.Chunk contents'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt; toMultimap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;, rx.functions.Func1&lt;? super T,? extends V&gt;, rx.functions.Func0&lt;? extends java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt;, rx.functions.Func1&lt;? super K,? extends java.util.Collection&lt;V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.TimeBasedChunkCreator TimeBasedChunkCreator(rx.operators.ChunkedOperation.NonOverlappingChunks&lt;T,C&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationNext java.lang.Iterable&lt;T&gt; next(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationUsing rx.Observable.OnSubscribeFunc&lt;T&gt; using(rx.functions.Func0&lt;RESOURCE&gt;, rx.functions.Func1&lt;RESOURCE,rx.Observable&lt;T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorFlatMap java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorCast rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationFlatMap rx.Observable.OnSubscribeFunc&lt;R&gt; flatMap(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends rx.Observable&lt;? extends U&gt;&gt;, rx.functions.Func2&lt;? super T,? super U,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRepeat java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAll rx.Observable.OnSubscribeFunc&lt;java.lang.Boolean&gt; all(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;T&gt; min(rx.Observable&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationOnExceptionResumeNextViaObservable rx.Observable.OnSubscribeFunc&lt;T&gt; onExceptionResumeNextViaObservable(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationElementAt rx.Observable.OnSubscribeFunc&lt;T&gt; elementAtOrDefault(rx.Observable&lt;? extends T&gt;, int, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt; toMultimap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;, rx.functions.Func1&lt;? super T,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.subjects.Subject&lt;T,T&gt; replayBuffered(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationThrottleFirst rx.Observable.OnSubscribeFunc&lt;T&gt; throttleFirst(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkipWhile java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSynchronize rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, rx.functions.Func0&lt;? extends rx.Observable&lt;? extends TClosing&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDelay rx.Observable&lt;T&gt; delay(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSerialize rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.BufferUntilSubscriber void onNext(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; buffer(rx.Observable&lt;T&gt;, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.TimeBasedChunkCreator TimeBasedChunkCreator(rx.operators.ChunkedOperation.OverlappingChunks&lt;T,C&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDelay rx.Observable.OnSubscribeFunc&lt;T&gt; delay(rx.Observable&lt;? extends T&gt;, rx.functions.Func0&lt;? extends rx.Observable&lt;U&gt;&gt;, rx.functions.Func1&lt;? super T,? extends rx.Observable&lt;V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Integer&gt; average(rx.Observable&lt;java.lang.Integer&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Double&gt; sumAtLeastOneDoubles(rx.Observable&lt;java.lang.Double&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDebounce rx.Observable.OnSubscribeFunc&lt;T&gt; debounceSelector(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends rx.Observable&lt;U&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay.VirtualList java.util.List&lt;T&gt; toList()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationToObservableFuture rx.Observable.OnSubscribeFunc&lt;T&gt; toObservableFuture(java.util.concurrent.Future&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; minBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;, java.util.Comparator&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorResumeNextViaFunction rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeWhile rx.Observable.OnSubscribeFunc&lt;T&gt; takeWhileWithIndex(rx.Observable&lt;? extends T&gt;, rx.functions.Func2&lt;? super T,? super java.lang.Integer,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorTake rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.TimeBasedChunkCreator TimeBasedChunkCreator(rx.operators.ChunkedOperation.NonOverlappingChunks&lt;T,C&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Long&gt; averageLongs(rx.Observable&lt;java.lang.Long&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationGroupJoin rx.Subscription onSubscribe(rx.Observer&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorSubscribeOnBounded java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Integer&gt; sumIntegers(rx.Observable&lt;java.lang.Integer&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSwitch rx.Observable.OnSubscribeFunc&lt;T&gt; switchDo(rx.Observable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationGroupByUntil.GroupSubject void onNext(V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationGroupByUntil rx.Subscription onSubscribe(rx.Observer&lt;? super rx.observables.GroupedObservable&lt;TKey,TResult&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperationSequenceEqual rx.Observable&lt;java.lang.Boolean&gt; sequenceEqual(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.functions.Func2&lt;? super T,? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.ChunkedOperation.ObservableBasedSingleChunkCreator ObservableBasedSingleChunkCreator(rx.operators.ChunkedOperation.NonOverlappingChunks&lt;T,C&gt;, rx.functions.Func0&lt;? extends rx.Observable&lt;? extends TClosing&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSynchronize java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkipWhile rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSingle rx.Observable.OnSubscribeFunc&lt;T&gt; single(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorFilter rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage.AverageDoubleExtractor rx.Subscription onSubscribe(rx.Observer&lt;? super java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='rx.operators.OperatorSkip java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.Observable.OnSubscribeFunc&lt;R&gt; when(rx.joins.Plan0&lt;R&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationParallelMerge rx.Observable&lt;rx.Observable&lt;T&gt;&gt; parallelMerge(rx.Observable&lt;rx.Observable&lt;T&gt;&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,T&gt;&gt; toMap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinctUntilChanged rx.Observable.OnSubscribeFunc&lt;T&gt; distinctUntilChanged(rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationCombineLatest rx.Observable.OnSubscribeFunc&lt;R&gt; combineLatest(rx.Observable&lt;? extends T0&gt;, rx.Observable&lt;? extends T1&gt;, rx.Observable&lt;? extends T2&gt;, rx.Observable&lt;? extends T3&gt;, rx.functions.Func4&lt;? super T0,? super T1,? super T2,? super T3,? extends R&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationAverage rx.Observable&lt;java.lang.Double&gt; averageDoubles(rx.Observable&lt;java.lang.Double&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorGroupBy java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationReplay rx.subjects.Subject&lt;T,T&gt; createScheduledSubject(rx.subjects.Subject&lt;T,T&gt;, rx.Scheduler) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationWindow rx.Observable.OnSubscribeFunc&lt;rx.Observable&lt;T&gt;&gt; window(rx.Observable&lt;? extends T&gt;, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(java.lang.Iterable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableList java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTimeInterval rx.Observable.OnSubscribeFunc&lt;rx.schedulers.TimeInterval&lt;T&gt;&gt; timeInterval(rx.Observable&lt;? extends T&gt;, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMerge java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationDistinct rx.Observable.OnSubscribeFunc&lt;T&gt; distinct(rx.Observable&lt;? extends T&gt;, rx.functions.Func1&lt;? super T,? extends U&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorDoOnEach rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.Observable.OnSubscribeFunc&lt;R&gt; when(java.lang.Iterable&lt;? extends rx.joins.Plan0&lt;R&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationParallelMerge rx.Observable&lt;rx.Observable&lt;T&gt;&gt; parallelMerge(rx.Observable&lt;rx.Observable&lt;T&gt;&gt;, int, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMergeDelayError rx.Observable.OnSubscribeFunc&lt;T&gt; mergeDelayError(rx.Observable&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorMap java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorScan java.lang.Object call(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSum rx.Observable&lt;java.lang.Double&gt; sumDoubles(rx.Observable&lt;java.lang.Double&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorOnErrorResumeNextViaFunction java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorRepeat rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationBuffer rx.Observable.OnSubscribeFunc&lt;java.util.List&lt;T&gt;&gt; bufferWithBoundaryObservable(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;B&gt;, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorAmb rx.Observable.OnSubscribe&lt;T&gt; amb(rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;, rx.Observable&lt;? extends T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSubscribeOnBounded rx.Subscriber&lt;? super rx.Observable&lt;T&gt;&gt; call(rx.Subscriber&lt;? super T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationThrottleFirst rx.Observable.OnSubscribeFunc&lt;T&gt; throttleFirst(rx.Observable&lt;T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorToObservableList rx.Subscriber&lt;? super T&gt; call(rx.Subscriber&lt;? super java.util.List&lt;T&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorZip rx.Subscriber&lt;? super rx.Observable[]&gt; call(rx.Subscriber&lt;? super R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToFuture java.util.concurrent.Future&lt;T&gt; toFuture(rx.Observable&lt;? extends T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorSkipWhile rx.functions.Func2&lt;T,java.lang.Integer,java.lang.Boolean&gt; toPredicate2(rx.functions.Func1&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationJoinPatterns rx.joins.Plan0&lt;R&gt; then(rx.Observable&lt;T1&gt;, rx.functions.Func1&lt;T1,R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OnSubscribeFromIterable void call(rx.Subscriber&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMergeDelayError rx.Observable.OnSubscribeFunc&lt;T&gt; mergeDelayError(java.util.List&lt;? extends rx.Observable&lt;? extends T&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationTakeLast rx.Observable.OnSubscribeFunc&lt;T&gt; takeLast(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToMultimap rx.Observable.OnSubscribeFunc&lt;java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt; toMultimap(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;? super T,? extends K&gt;, rx.functions.Func1&lt;? super T,? extends V&gt;, rx.functions.Func0&lt;? extends java.util.Map&lt;K,java.util.Collection&lt;V&gt;&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationSkipLast.SkipLastTimed SkipLastTimed(rx.Observable&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit, rx.Scheduler) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationToObservableFuture rx.Observable.OnSubscribeFunc&lt;T&gt; toObservableFuture(java.util.concurrent.Future&lt;? extends T&gt;, long, java.util.concurrent.TimeUnit)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperationMinMax rx.Observable&lt;java.util.List&lt;T&gt;&gt; maxBy(rx.Observable&lt;T&gt;, rx.functions.Func1&lt;T,R&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorDoOnEach java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='rx.operators.OperatorCast java.lang.Object call(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
